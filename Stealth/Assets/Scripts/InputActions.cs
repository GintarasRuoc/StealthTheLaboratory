//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7d772e7d-76a2-48dc-849e-2c9f884468e3"",
            ""actions"": [
                {
                    ""name"": ""goTo"",
                    ""type"": ""Button"",
                    ""id"": ""2185f5eb-1b96-4122-8e6e-f26af26c9272"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""toggleWalk"",
                    ""type"": ""Button"",
                    ""id"": ""f62c51b0-7bc1-4b7c-b819-8a70550739a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""activeSkill"",
                    ""type"": ""Button"",
                    ""id"": ""328bd8df-d671-4420-a969-f4298ce0d792"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""interact"",
                    ""type"": ""Button"",
                    ""id"": ""807d6cc6-e506-4950-b721-b7b8cbc513d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""zoom"",
                    ""type"": ""Value"",
                    ""id"": ""87595048-9723-4075-8871-72cedc3f19f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""lookAround"",
                    ""type"": ""Button"",
                    ""id"": ""3c262a7a-22c7-43a4-adea-296e3f6747f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""8a913b92-8a8c-441b-b11d-eaf44ac8de43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ecd0de8-e733-46d3-a18f-bc6bcb4e9506"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""goTo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0cd8e48-9e10-4f17-8c5d-82d284ce22d2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""toggleWalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4170cbfe-eef5-42cd-9488-d1e93b9e512c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""activeSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1b0ab73-2987-4665-ad8a-3b0469463cd8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""158dafb8-5a02-4728-9288-8a3f090bcc64"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""225e5fd4-1a94-46e1-8791-0e033906735d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25346567-0ec1-440c-9278-9fe407ea5f55"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SkillUse"",
            ""id"": ""7599e4e3-87df-4ff3-bf0b-e7bba48b068f"",
            ""actions"": [
                {
                    ""name"": ""activate"",
                    ""type"": ""Button"",
                    ""id"": ""85570013-3972-4b7c-aec4-8645454146ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cancel"",
                    ""type"": ""Button"",
                    ""id"": ""c0b23e70-bcaa-4324-89e1-b5d2827d5040"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce93d3a8-4881-4934-9419-b939aa73a80b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bedac9e-a3db-4f13-baf7-4960747f3b44"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_goTo = m_Player.FindAction("goTo", throwIfNotFound: true);
        m_Player_toggleWalk = m_Player.FindAction("toggleWalk", throwIfNotFound: true);
        m_Player_activeSkill = m_Player.FindAction("activeSkill", throwIfNotFound: true);
        m_Player_interact = m_Player.FindAction("interact", throwIfNotFound: true);
        m_Player_zoom = m_Player.FindAction("zoom", throwIfNotFound: true);
        m_Player_lookAround = m_Player.FindAction("lookAround", throwIfNotFound: true);
        m_Player_pauseGame = m_Player.FindAction("pauseGame", throwIfNotFound: true);
        // SkillUse
        m_SkillUse = asset.FindActionMap("SkillUse", throwIfNotFound: true);
        m_SkillUse_activate = m_SkillUse.FindAction("activate", throwIfNotFound: true);
        m_SkillUse_cancel = m_SkillUse.FindAction("cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_goTo;
    private readonly InputAction m_Player_toggleWalk;
    private readonly InputAction m_Player_activeSkill;
    private readonly InputAction m_Player_interact;
    private readonly InputAction m_Player_zoom;
    private readonly InputAction m_Player_lookAround;
    private readonly InputAction m_Player_pauseGame;
    public struct PlayerActions
    {
        private @InputActions m_Wrapper;
        public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @goTo => m_Wrapper.m_Player_goTo;
        public InputAction @toggleWalk => m_Wrapper.m_Player_toggleWalk;
        public InputAction @activeSkill => m_Wrapper.m_Player_activeSkill;
        public InputAction @interact => m_Wrapper.m_Player_interact;
        public InputAction @zoom => m_Wrapper.m_Player_zoom;
        public InputAction @lookAround => m_Wrapper.m_Player_lookAround;
        public InputAction @pauseGame => m_Wrapper.m_Player_pauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @goTo.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGoTo;
                @goTo.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGoTo;
                @goTo.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnGoTo;
                @toggleWalk.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleWalk;
                @toggleWalk.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleWalk;
                @toggleWalk.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleWalk;
                @activeSkill.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActiveSkill;
                @activeSkill.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActiveSkill;
                @activeSkill.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnActiveSkill;
                @interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @zoom.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @zoom.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @zoom.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnZoom;
                @lookAround.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookAround;
                @lookAround.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookAround;
                @lookAround.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookAround;
                @pauseGame.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPauseGame;
                @pauseGame.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPauseGame;
                @pauseGame.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPauseGame;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @goTo.started += instance.OnGoTo;
                @goTo.performed += instance.OnGoTo;
                @goTo.canceled += instance.OnGoTo;
                @toggleWalk.started += instance.OnToggleWalk;
                @toggleWalk.performed += instance.OnToggleWalk;
                @toggleWalk.canceled += instance.OnToggleWalk;
                @activeSkill.started += instance.OnActiveSkill;
                @activeSkill.performed += instance.OnActiveSkill;
                @activeSkill.canceled += instance.OnActiveSkill;
                @interact.started += instance.OnInteract;
                @interact.performed += instance.OnInteract;
                @interact.canceled += instance.OnInteract;
                @zoom.started += instance.OnZoom;
                @zoom.performed += instance.OnZoom;
                @zoom.canceled += instance.OnZoom;
                @lookAround.started += instance.OnLookAround;
                @lookAround.performed += instance.OnLookAround;
                @lookAround.canceled += instance.OnLookAround;
                @pauseGame.started += instance.OnPauseGame;
                @pauseGame.performed += instance.OnPauseGame;
                @pauseGame.canceled += instance.OnPauseGame;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // SkillUse
    private readonly InputActionMap m_SkillUse;
    private ISkillUseActions m_SkillUseActionsCallbackInterface;
    private readonly InputAction m_SkillUse_activate;
    private readonly InputAction m_SkillUse_cancel;
    public struct SkillUseActions
    {
        private @InputActions m_Wrapper;
        public SkillUseActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @activate => m_Wrapper.m_SkillUse_activate;
        public InputAction @cancel => m_Wrapper.m_SkillUse_cancel;
        public InputActionMap Get() { return m_Wrapper.m_SkillUse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillUseActions set) { return set.Get(); }
        public void SetCallbacks(ISkillUseActions instance)
        {
            if (m_Wrapper.m_SkillUseActionsCallbackInterface != null)
            {
                @activate.started -= m_Wrapper.m_SkillUseActionsCallbackInterface.OnActivate;
                @activate.performed -= m_Wrapper.m_SkillUseActionsCallbackInterface.OnActivate;
                @activate.canceled -= m_Wrapper.m_SkillUseActionsCallbackInterface.OnActivate;
                @cancel.started -= m_Wrapper.m_SkillUseActionsCallbackInterface.OnCancel;
                @cancel.performed -= m_Wrapper.m_SkillUseActionsCallbackInterface.OnCancel;
                @cancel.canceled -= m_Wrapper.m_SkillUseActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_SkillUseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @activate.started += instance.OnActivate;
                @activate.performed += instance.OnActivate;
                @activate.canceled += instance.OnActivate;
                @cancel.started += instance.OnCancel;
                @cancel.performed += instance.OnCancel;
                @cancel.canceled += instance.OnCancel;
            }
        }
    }
    public SkillUseActions @SkillUse => new SkillUseActions(this);
    public interface IPlayerActions
    {
        void OnGoTo(InputAction.CallbackContext context);
        void OnToggleWalk(InputAction.CallbackContext context);
        void OnActiveSkill(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnLookAround(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
    public interface ISkillUseActions
    {
        void OnActivate(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
